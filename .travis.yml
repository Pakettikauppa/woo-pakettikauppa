# Define jobs
jobs:
  include:
    # Run our custom Git commit checks
    - name: Gnitpick
      language: python
      services: # none
      install:
      - curl -O https://raw.githubusercontent.com/Seravo/gnitpick/master/gnitpick.py
      script:
      - python3 ./gnitpick.py
    # Test the legacy 4.9 series and an older PHP version
    - php: '7.1'
      env: WP_VERSION=4.9.12
    # Arbitrary PHP version to run the PHPCS sniffs against, also with multisite
    - php: '7.2'
      env: WP_VERSION=latest WP_MULTISITE=1 SNIFF=1
    # Test PHP 7.3
    - php: '7.3'
      env: WP_VERSION=latest
    # Test the next upcoming major WP release with latest PHP
    - php: '7.3'
      env: WP_VERSION=nightly
    # Test the both development versions
    - php: 'nightly'
      env: WP_VERSION=nightly
  allow_failures:
    # WordPress core is currenlty not compatible with PHP 8,
    # so tests with the PHP development version will fail with:
    #   PHP Fatal error:  Uncaught RuntimeException: Array and string offset
    #   access syntax with curly braces is deprecated on line 757 in file
    #   /tmp/wordpress/wp-includes/script-loader.php
    - php: nightly

# Common for all jobs
language: php
services: mysql

install:
  # Install phpunit 7.x as WordPress 5.x does not support 8.x yet
  # Install phpunit 5.x for older WordPress 4.x series
  - if [[ "$TRAVIS_PHP_VERSION" == "7.1" ]]; then PHPUNIT_VERSION=5.7.9; else PHPUNIT_VERSION=7.5.9; fi
  - wget https://phar.phpunit.de/phpunit-$PHPUNIT_VERSION.phar -O /tmp/phpunit; chmod +x /tmp/phpunit
  # Install WordPress PHPUnit tests
  - bash bin/install-wp-tests.sh wordpress_test root '' localhost $WP_VERSION
  # Install PHP_CodeSniffer with a specific version defined so that devs and Travis-CI will have exactly same standards
  - if [[ "$SNIFF" == "1" ]]; then export PHPCS_DIR=/tmp/phpcs; export PHPCS_VERSION=3.3.2; fi
  - if [[ "$SNIFF" == "1" ]]; then export WP_SNIFFS_DIR=/tmp/wp-sniffs; export WP_SNIFFS_VERSION=2.1.0; fi
  - if [[ "$SNIFF" == "1" ]]; then export SECURITY_SNIFFS_DIR=/tmp/security-sniffs; export SECURITY_SNIFFS_VERSION=2.0.0; fi
  - if [[ "$SNIFF" == "1" ]]; then export PHP_COMPATIBILITY_SNIFFS_DIR=/tmp/compatibility-sniffs; export PHP_COMPATIBILITY_SNIFFS_VERSION=9.1.1; fi
   # Install PHP_CodeSniffer.
  - if [[ "$SNIFF" == "1" ]]; then wget https://github.com/squizlabs/PHP_CodeSniffer/archive/$PHPCS_VERSION.tar.gz -O $PHPCS_VERSION.tar.gz && tar -xf $PHPCS_VERSION.tar.gz && mv PHP_CodeSniffer-$PHPCS_VERSION $PHPCS_DIR; fi
  # Install WordPress Coding Standards.
  - if [[ "$SNIFF" == "1" ]]; then wget https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards/archive/$WP_SNIFFS_VERSION.tar.gz -O $WP_SNIFFS_VERSION.tar.gz && tar -xf $WP_SNIFFS_VERSION.tar.gz && mv WordPress-Coding-Standards-$WP_SNIFFS_VERSION $WP_SNIFFS_DIR; fi
  # Install PHPCS Security Audit.
  - if [[ "$SNIFF" == "1" ]]; then wget https://github.com/FloeDesignTechnologies/phpcs-security-audit/archive/$SECURITY_SNIFFS_VERSION.tar.gz -O $SECURITY_SNIFFS_VERSION.tar.gz && tar -xf $SECURITY_SNIFFS_VERSION.tar.gz && mv phpcs-security-audit-$SECURITY_SNIFFS_VERSION $SECURITY_SNIFFS_DIR; fi
  # Install PHP Compatibility.
  - if [[ "$SNIFF" == "1" ]]; then wget https://github.com/PHPCompatibility/PHPCompatibility/archive/$PHP_COMPATIBILITY_SNIFFS_VERSION.tar.gz -O $PHP_COMPATIBILITY_SNIFFS_VERSION.tar.gz && tar -xf $PHP_COMPATIBILITY_SNIFFS_VERSION.tar.gz && mv PHPCompatibility-$PHP_COMPATIBILITY_SNIFFS_VERSION $PHP_COMPATIBILITY_SNIFFS_DIR; fi
  # Set install path for sniffs.
  - if [[ "$SNIFF" == "1" ]]; then $PHPCS_DIR/bin/phpcs --config-set installed_paths $WP_SNIFFS_DIR,$SECURITY_SNIFFS_DIR,$PHP_COMPATIBILITY_SNIFFS_DIR; fi
  # Show installed sniffs
  - if [[ "$SNIFF" == "1" ]]; then ${PHPCS_DIR}/bin/phpcs -i; fi
  # After CodeSniffer install you should refresh your path.
  - if [[ "$SNIFF" == "1" ]]; then phpenv rehash; fi

script:
  # Syntax check all PHP files and fail for any error text in STDERR
  - '! find . -type f -name "*.php" -exec php -d error_reporting=32767 -l {} \; 2>&1 >&- | grep "^"'
  # More extensive PHP Style Check
  - if [[ "$SNIFF" == "1" ]]; then $PHPCS_DIR/bin/phpcs -i; $PHPCS_DIR/bin/phpcs -n --extensions=php --standard=phpcs.xml; fi
  # Run PHPUnit tests, disabled due to permanent Travis failure
  - /tmp/phpunit --verbose
